# Business: This action is used to test various PR-related things.
# TODO: It's less about commenting, and SHOULD have some more flexible step-running stuff when it's more established.
# TODO: THere's probably a way to inherit/borrow elements from test-pr-action-1, but have to look into it

name: Test PR Action 2

# Controls when the workflow will run
on:
  # TODO: Eventually comment this back in?
  # pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      pr_number_manual:
        description: "Optional PR number to use"
        required: false
        type: string
        default: '61' # PR #61 has two changed files README.md and shell-scripts/info.txt 
      pr_creator_manual:
        description: "Optional user/PR creator to specify"
        required: false
        type: string
      target_branch_manual:
        description: "Optional target branch to specify"
        required: false
        type: string

jobs:
  # TODO: Change job-name and name: if the purpose changes
  pr-related-things:
    name: Perform logic related to PR
  
    runs-on: ubuntu-latest

    permissions:
      issues: write
      pull-requests: write
      contents: write

    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Echo things
        run: echo "Will echo stuff here as needed"

      - name: Assess pr_number_manual input
        # If input is not default value, this is a manual run and PR number should be overwritten with manual input
        # If input is default value (null), skip this step
        if: ${{ github.event.inputs.pr_number_manual != null }}
        run: |
          echo "Job manually started: Setting PR_NUMBER to value of github.event.inputs.pr_number_manual (${{ github.event.inputs.pr_number_manual }})"
          echo "PR_NUMBER=${{ github.event.inputs.pr_number_manual }}" >> $GITHUB_ENV
      
      #TODO: LOOKUP AND EXPLAIN
      - name: Configure Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
      # TODO: LOOK UP AND EXPLAIN JQ MAP
      # TODO: EXPLAIN HOW YOU WERE ABLE TO WRITE TO JSONOUTPUT FILE
      # jq map will filter out TBD
      - name: Get List of Changed Files
        id: changed_files
        run: |
          # [] = give separate output for each
          mapfile -t changed_files < <(gh api --method GET "/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" | jq -r '.[].filename') )
          # gh api --method GET "/repos/${{ github.repository }}/pulls/$PR_NUMBER/files"
          # changed_files_output=$(gh api --method GET "/repos/${{ github.repository }}/pulls/$PR_NUMBER/files")
          # echo "$changed_files_output" > test-json-output.txt 
          # git add test-json-output.txt
          # git commit -m "Capture output from Github 'get changed files' call"
          # git push origin main
          
          # mapfile -t changed_files < <(gh api --method GET "/repos/${{ github.repository }}/pulls/$PR_NUMBER/files" | jq -r 'map(.filename) | join(", ")')
          # echo "Printing changed file list:"
          # echo "${changed_files}"
          printf "%s\\n" "${changed_files[@]}"

          # echo "CHANGED_FILES=${changed_files}" >> $GITHUB_ENV
          # echo "CHANGED_FILES=${changed_files}" >> $GITHUB_OUTPUT
      
      - name: Print CHANGED_FILES
        run: |
          echo "Attempt to print env.CHANGED_FILES..."
          # changed_files=${{env.CHANGED_FILES}}
          changed_files=${{ steps.changed_files.outputs.CHANGED_FILES }}
          printf "%s\\n" "${changed_files[@]}"
          echo "changed_files[0] = ${changed_files[0]}"
          echo "changed_files[1] = ${changed_files[1]}"