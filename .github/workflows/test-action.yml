# Informative: This is a basic workflow to help you get started with Actions

#The name at top-level gives the job a name that is seen in the Actions tab.
name: Test Github Action

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # 8-28-25: These should probably be commented back in at some point, but I'm doing PR related testing and this is just static.
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # workflow_dispatch allows you to run this workflow manually from the Actions tab
  # The inputs context allows you to put in inputs when you run a workflow manually (reference via github.event.inputs)
  # They will appear when you hit the 'Run Workflow' buttons on the Action page, in a pop-up form format
  # Inputs can be customized into types to be required and have default values (see below for an example of each input type)
  # When a workflow is triggered (i.e. NOT manually), these inputs will be null if referenced.
  workflow_dispatch:
    inputs:
      example_string_input:
        description: "This text appears because of the 'description' keyword. Type ex here to see an example of a conditional step."
        required: false
        type: string
        default: 'default value'
      example_number_input:
        description: "Example number input"
        required: false
        type: number
      example_bool_input:
        description: "Example boolean input"
        required: false
        type: boolean
        default: false
      example_choice_input:
        description: "Example choice input"
        required: false
        type: choice
        options: 
          - option 1
          - option 2
          - option 3
      #TODO: This one is a mystery. There isn't much about it. See github/docs/issues/25938
      example_environment_input:
        description: "Example environment input"
        required: false
        type: boolean
          



# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test-job"
  test-job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Environmental variables. These are always strings
    env:
      PR_NUMBER: "33"
      COMMENT_URL: "https://api.github.com/repos/${{github.repository}}/issues/NUM/comments"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # The uses keyword indicates the step uses a prebuilt action.
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Pretty much all Github Actions need and utilize this
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell. The usage of the pipe | is necessary
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      # Shows how the variables described in job-level env can be used by subsequent steps   
      - name: Echo job-level env vars
        run: |
          echo "PR_NUMBER = $PR_NUMBER"
          echo "$ {PR_NUMBER} = ${PR_NUMBER}"

      - name: Echo inputs
        run: |
          echo "example_string_input = ${{ github.event.inputs.example_string_input }}"
          echo "example_number_input = ${{ github.event.inputs.example_number_input }}"
          echo "example_bool_input = ${{ github.event.inputs.example_bool_input }}"
          echo "example_choice_input = ${{ github.event.inputs.example_choice_input }}"
          echo "example_environment_input = ${{ github.event.inputs.example_environment_input }}"
      
      # Example of how to use the 'github' context
      - name: Print the organization
        run: echo "The organization name is:${{github.repository_owner}}"
      
      # Example Use simple Bash ${string/substring-to-replace/replacement} logic on job-env var COMMENT_URL (replace "NUM" with $PR_NUMBER)
      - name: Modify COMMENT_URL    
        run: |  
          echo "URL before:  $COMMENT_URL"
          COMMENT_URL="${COMMENT_URL/NUM/$PR_NUMBER}"
          echo "URL after:  $COMMENT_URL"
      
      # TODO: Rework this. This is because we didn't >> GITHUB_ENV
      # Shows how change in above step does NOT persist in future step (surprising)
      - name: Echo COMMENT_URL after modification in different step
        run: echo $COMMENT_URL

      - name: Make shell scripts executable
        run: chmod +x ./shell-scripts/*.sh # Gives execute permissions to the script
      
      # Example of how to run a shell script from within a workflow
      - name: Run the say-hello.sh shell script
        run: ./shell-scripts/say-hello.sh
      
      # TODO: Rework this to use inputs?
      # Example of a step with an id, calling Bash script with arg and writing return value to GITHUB_OUTPUT
      - name: Give shell script an arg (the int 2), write result to GITHUB_OUTPUT
        # A step id is used by other steps in the workflow. It is distinct from name, which is more for display purposes. (see below for details)
        id: divis_by_2
        # In Bash, >> redirects the standard output to whatever is to the right of >> (in this case GITHUB_OUTPUT)
        # GITHUB_OUTPUT is an environment variable that points to an environment file, a temporary file that workflows can access 
        # Items written to GITHUB_OUTPUT can be referenced by later steps via the syntax steps.step_name.outputs.VAR_NAME
        # An id must be present in the step where GITHUB_OUTPUT is written to so the step can be referenced via the above syntax
        # Call shell script with 2 args: method_name and num_to_divide
        run: |
          echo "DIVISIBLE_BY_2_B=$(./shell-scripts/divide.sh 'is_divisible_by_2' '2')" | tr '\n' ' ' >> $GITHUB_OUTPUT
      
      # Example of how to reference output from another previous, step-level env var. Use the step id mentioned in previous step/comments
      - name: Return value from previous step via GITHUB_OUTPUT 
        env:
          DIVISIBLE_BY_2_B: ${{ steps.divis_by_2.outputs.DIVISIBLE_BY_2_B }}
        run: echo "DIVISIBLE_BY_2_B = $DIVISIBLE_BY_2_B"

      - name: Example conditional (Runs if inputs.example_string_input is 'ex'')
        if: github.event.inputs.example_string_input == 'ex'
        run: echo "You are seeing this statement because you put 'ex' in example_string_input!"
      # TODO: Figure out how to list teams
      - name: State the teams in this organization
        run: echo "TODO Teams TBD"

      # GITHUB_WORKSPACE is an environmental variable whose value is the default working directory on the runner for steps 
      # This is also the default location of your repository when using the checkout action. Ex. /home/runner/work/bash-git-script/bash-git-script
      - name: State GITHUB_WORKSPACE var
        run: echo "Github Workspace = $GITHUB_WORKSPACE"

      #TODO Throw this or something like it in a step
      # if [[ 2 -gt 1 ]]
      # then
      # echo "TEST"
      # fi