# Business: This automatically adds a comment with the time a pull request was closed. This applies to ALL pull requests in the repo
# There's plenty of info in the comments here though

name: Closing PR Comment w timestamp

on:
  pull_request:
    # Only on closed PRs
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      pr_number_manual:
        description: "PR number to use when this action is manually triggered"
        required: true
        type: string
        default: 'default'

jobs:
  closing-pr-comment-job:
    
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      # If manually run, use value of pr_number_manual
      # If auto run (trigger: PR closes) use PR_NUMBER
      # Issue is when auto run, pr_number_manual has no value so if keyword errors out
      - name: Assess pr_number_manual input
        # If input is not default value, this is a manual run and PR number should be overwritten with manual input
        # If input is default value, skip this step
        if: ${{ github.event.inputs.pr_number_manual != null }}
        run: |
          echo "Job manually started: Setting PR_NUMBER to value of inputs.pr_number_manual (${{ inputs.pr_number_manual }})"
          echo "PR_NUMBER=${{ inputs.pr_number_manual }}" >> $GITHUB_ENV

      - name: Set TIMESTAMP
        id: set-timestamp
        run: echo "TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

      - name: Closing comment on PR
        id: closing_comment_step 
        run: |
          echo "Adding closing comment to PR Number: $PR_NUMBER"
          COMMENT="This pull request was closed on ${{ env.TIMESTAMP }}."
          COMMENT_URL="https://api.github.com/repos/${{github.repository}}/issues/NUM/comments"
          # Replace "NUM" with with the PR_NUMBER env var
          COMMENT_URL="${COMMENT_URL/NUM/$PR_NUMBER}"
          
          # curl is a command-line tool to test APIs, amongst other uses. The curl command here reaches out to Github API via a POST request to make a PR comment.
          # -s = silent (won't display progress meter or error messages), -o redirects output to entity to right
          # In this case, entity to right of -o is /dev/null, which is a data black hole--any data written to it is immediately discarded.
          # We use /dev/null here because we only want to capture the HTTP status code (we use -w "%{http_code}" to get it) 
          # -H = custom curl header, -X used to specify HTTP method, -d indicates the data to send
          RESPONSE=$(curl -s -o /dev/null -H "Authorization: token ${GITHUB_TOKEN}" -w "%{http_code}" -X POST -i $COMMENT_URL -d "{\"body\":\"$COMMENT\"}")
          echo "RESPONSE=$RESPONSE" >> $GITHUB_OUTPUT
      - name: Evaluate Status Code 
        run: |
          # echo "Not doing anything currently. TODO: DELETE ME WHEN DONE DEBUGGING"
          echo "Status code = ${{ steps.closing_comment_step.outputs.RESPONSE }}"
