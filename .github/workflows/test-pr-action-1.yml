# This action is used to test stuff with PRs.

name: Test PR Action 1

# Controls when the workflow will run
on:
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  get-filenames-in-pr:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    name: PR Activity 

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Echo PR vars
        run: |
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event.pull_request.number = ${{ github.event.pull_request.number }}"
          echo "Incoming branch (github.head_ref)	= ${{github.head_ref}}"
          echo Target branch (github.event.pull_request.base.ref) "${{ github.event.pull_request.base.ref }}"
          echo "github.ref	= ${{github.ref}}"
      # Use GitHub API to create a comment on the PR
      - name: Automated comment on PR
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          # Try just the number...
          # PR_NUMBER=${{ github.event.number }}
          COMMENT="This is an automated comment"
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          COMMENT_URL="https://api.github.com/repos/${{github.repository}}/issues/${PR_NUMBER}/comments"
          echo "COMMENT_URL = ${COMMENT_URL}"
          # -H = custom curl header, -X used to specify HTTP method, -d indicates the data to send
          curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"$COMMENT\"}"

      # - name: Get most recent hash of this workflow
      #   run: echo "Most recent hash--TBD"
        # run: echo "Attempting to get most most recent hash of workflow..."
          # You can use GitHub's API to query the last run of your workflow, getting the git hash of that commit. 
          # Then compare with the current hash to find the list of changed files - regardless of how many commits were pushed at a time.

      # - name: Get changed files
      #   # Use github.event.pull_request to get the base SHA* (the SHA where the PR originated from) with the head branch's commit SHA (the latest commit in the PR) 
      #   # and output only the names of the changed files. 
      #   # The base SHA represents the specific point in the history of the target branch (the branch the PR is merging into, usually main for this repo) 
      #   # from which the changes in the pull request diverge. It's the common ancestor commit between the head of the pull request's branch and the base branch.
      #   # ex. The branch feature/matt-add-group-profile-pic has a SHA of 59d780bc575a65aba2c7ada2d0551bf19556cf5f. In history, this is before a profile pic was added and before a description was added to cyanize()
      #   # To get the base SHA of a feature branch, you can use $ git merge-base --fork-point <target-branch> <feature-branch> 
      #   # ex. $ git merge-base --fork-point main feature/matt-add-group-profile-pic
        
      #   run: |
      #     git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
