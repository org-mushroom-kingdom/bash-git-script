# Business: This action is used to interact with open PRs.
# It will always add a comment to the PR, and add an additional comment if the feature branch name contains 'readme'
# It will also add the creator of the PR to the 'Assignees' section (this is in progress)

name: Test PR Action 1

# Controls when the workflow will run
on:
  pull_request:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      pr_number_manual:
        description: "Optional PR number to use"
        required: false
        type: string
      pr_creator_manual:
        description: "Optional user/PR creator to specify"
        required: false
        type: string
      target_branch_manual:
        description: "Optional target branch to specify"
        required: false
        type: string
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "automated-pr-comments"
  automated-pr-comments:
    name: Automated PR Comments 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    # Job-specific variables can be used by steps (and the job itself)
    env:
      FEATURE_BRANCH: ${{github.head_ref}}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      # Try just the number...
      # PR_NUMBER=${{ github.event.number }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Echo PR vars AND env vars 
        run: |
          echo "github.event.number = ${{ github.event.number }}"
          echo "github.event.pull_request.number = ${{ github.event.pull_request.number }}"
          echo "Incoming branch/feature branch (github.head_ref)	= ${{github.head_ref}}"
          echo "Target branch (github.event.pull_request.base.ref) = ${{ github.event.pull_request.base.ref }}"
          echo "github.ref	= ${{github.ref}}"  
          echo "---------------------"
          echo $FEATURE_BRANCH
          echo $PR_NUMBER
          echo $COMMENT_URL
      
      # Use curl and GitHub API to create a comment on the PR (POST to specific issue URL /comments)
      # COMMENT_URL is declared and then immediately changed because 
      - name: Automated comment on PR (Unconditional)
        run: |
          COMMENT="This is an automated comment that goes in every pull request in the bash-git-script repo."
          COMMENT_URL="https://api.github.com/repos/${{github.repository}}/issues/NUM/comments"
          COMMENT_URL="${COMMENT_URL/NUM/$PR_NUMBER}"
          # # -H = custom curl header, -X used to specify HTTP method, -d indicates the data to send
          
          echo $COMMENT_URL
          curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"$COMMENT\"}"

      #Example of using a conditional (incoming/feature branch contains 'readme' or 'README')
      - name: Conditional comment on PR (if feature branch contains 'readme')
        # Note the if: and contains() syntax
        if: contains(env.FEATURE_BRANCH, 'readme') || contains(env.FEATURE_BRANCH, 'README')
        # A multiline comment in a PR can be made using <br> as a line break
        #TODO: For a bigger multiline comment, try multiple echos and EOF or messing with \n-<br> replacement
        run: | 
          COMMENT_URL="https://api.github.com/repos/${{github.repository}}/issues/NUM/comments"
          COMMENT_URL="${COMMENT_URL/NUM/$PR_NUMBER}"
          COMMENT="This is an automated comment that only shows up if the feature branch contains 'readme' or 'README'<br> This is a multiline comment."
          curl -s -H "Authorization: token ${GITHUB_TOKEN}" -X POST $COMMENT_URL -d "{\"body\":\"$COMMENT\"}"
        #TODO: Use a conditional here to alter a comment's text

  add-params-to-pr:
    name: Assign PR Creator, Add Labels to PR 
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      pull-requests: write
      
    # Trying to use $GITHUB_ACTOR will not work here (just stays as literal string "$GITHUB_ACTOR"), so use github.actor context instead
    # TODO: EXPLAIN HOW YOU SET UP FINE GRAINED TEAMS_READ_TOKEN VIA YOUR GITHUB ACCOUNT, MADE ORG THE OWNER, GAVE PERMISSIONS, AND PASTED VALUE INTO REPO SECRET
    # NOT ONLY HERE, BUT IN DOCS!!
    env:
      GH_TOKEN: ${{ github.token }}
      TEAMS_READ_TOKEN: ${{ secrets.TEAMS_READ_ACCESS }}
      ORG: ${{ github.repository_owner }}
      PR_NUMBER: ${{ github.event.pull_request.number }}
      PR_CREATOR: ${{ github.actor }}
      TARGET_BRANCH: ${{ github.event.pull_request.base.ref }}
    steps:
      - uses: actions/checkout@v4
      
      # - name: Get assignable users
      #   run: |
      #     # gh api graphql -f query='query($endCursor:String){repository(owner:"org-mushroom-kingdom",name:"bash-git-script"){assignableUsers(first:100,after:$endCursor){nodes{login}pageInfo{endCursor,hasNextPage}}}}' --paginate --jq '.data.repository.assignableUsers.nodes[].login' | tee assignable-azure.txt
      #     gh api users/${{ inputs.pr_creator_manual }}
      #     echo "Exiting early with bad exit code"
      #     exit 1

      - name: Assess pr_number_manual input
        # If input is not default value, this is a manual run and PR number should be overwritten with manual input
        # If input is default value (null), skip this step
        if: ${{ github.event.inputs.pr_number_manual != null }}
        run: |
          echo "Job manually started: Setting PR_NUMBER to value of github.event.inputs.pr_number_manual (${{ github.event.inputs.pr_number_manual }})"
          echo "PR_NUMBER=${{ github.event.inputs.pr_number_manual }}" >> $GITHUB_ENV
      
      - name: Assess pr_creator_manual input
        # If input is not default value, this is a manual run and PR number should be overwritten with manual input
        # If input is default value (null), skip this step
        if: ${{ github.event.inputs.pr_creator_manual != null }}
        run: |
          echo "Job manually started: Setting PR_CREATOR to value of github.event.inputs.pr_creator_manual (${{ github.event.inputs.pr_creator_manual }})"
          echo "PR_CREATOR=${{ github.event.inputs.pr_creator_manual }}" >> $GITHUB_ENV
      
      - name: Assess target_branch_manual input
        # If input is not default value, this is a manual run and PR number should be overwritten with manual input
        # If input is default value (null), skip this step
        if: ${{ github.event.inputs.target_branch_manual != null }}
        run: |
          echo "Job manually started: Setting target branch to value of github.event.inputs.target_branch_manual (${{ github.event.inputs.target_branch_manual }})"
          echo "TARGET_BRANCH=${{ github.event.inputs.target_branch_manual }}" >> $GITHUB_ENV
      
      - name: Make shell scripts executable
        run: chmod +x ./shell-scripts/*.sh # Gives execute permissions to the script

      - name: Add PR Creator to Assignees
        id: add_assignee
        run: |
          echo "Assigning user $PR_CREATOR to PR #$PR_NUMBER"
          gh pr edit $PR_NUMBER --add-assignee $PR_CREATOR
          echo "EXIT_CODE=$?" >> $GITHUB_ENV
          echo "exit code = $?"
      
      - name: Exit if bad EXIT_CODE from prev step
        if: env.EXIT_CODE != '0'
        run: |
          echo "Exit code from previous step ${{steps.add_assignee.name}} is non-zero value. ${{env.EXIT_CODE}}"
          exit "${{env.EXIT_CODE}}"
      
      # Add team-* label based on assignee via calling a script
      # ^This cannot be done with GH_TOKEN as its permissions only scoped to the current repo that contains this workflow.
      # ^Instead, must create a fine grained personal access token with organization:Members:read permission
      # This script also assigns an environment label based on the target branch (ex. if merging into env/dev applies correspoding 'dev' label)
      - name: Add team label(s) b/o assignee; env label b/o target branch
        run: |
          # echo "get-label.sh: Give username as arg, get the teams they are on, assign the team."
          ./shell-scripts/pr-labels.sh

      #TODO: MOVE THIS somewhere else, like a separate CODEOWNERS related action
      # - name: Get most recent hash of this workflow
      #   run: echo "Most recent hash--TBD"
        # run: echo "Attempting to get most most recent hash of workflow..."
          # You can use GitHub's API to query the last run of your workflow, getting the git hash of that commit. 
          # Then compare with the current hash to find the list of changed files - regardless of how many commits were pushed at a time.
      
      #TODO: MOVE THIS somewhere else, like a separate CODEOWNERS related action
      # - name: Get changed files
      #   # Use github.event.pull_request to get the base SHA* (the SHA where the PR originated from) with the head branch's commit SHA (the latest commit in the PR) 
      #   # and output only the names of the changed files. 
      #   # The base SHA represents the specific point in the history of the target branch (the branch the PR is merging into, usually main for this repo) 
      #   # from which the changes in the pull request diverge. It's the common ancestor commit between the head of the pull request's branch and the base branch.
      #   # ex. The branch feature/matt-add-group-profile-pic has a SHA of 59d780bc575a65aba2c7ada2d0551bf19556cf5f. In history, this is before a profile pic was added and before a description was added to cyanize()
      #   # To get the base SHA of a feature branch, you can use $ git merge-base --fork-point <target-branch> <feature-branch> 
      #   # ex. $ git merge-base --fork-point main feature/matt-add-group-profile-pic
        
      #   run: |
      #     git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}
